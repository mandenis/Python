
		ЗАДАНИЕ:
На вход программе подается число n, а затем n строк, содержащих целые числа в порядке возрастания.
 Из данных строк формируются списки чисел.
Напишите программу, которая объединяет указанные списки в один отсортированный список с помощью функции quick_merge(), 
а затем выводит его.
Формат входных данных
На вход программе подается натуральное число n, а затем n строк, содержащих целые числа в порядке возрастания, 
разделенные символом пробела.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи

		РЕШЕНИЕ:
def multi_stringi(x):
   y = list()
   for i in x:
      y += i
   sp = list()
   for i in y:
      sp.append(int(i))
   return sorted(sp)

stringi = [input().split() for i in range(int(input()))]
print(*(multi_stringi(stringi)))


		
		ЗАДАНИЕ:
Напишите функцию is_valid_triangle(side1, side2, side3), которая принимает в качестве аргументов три натуральных числа,
и возвращает значение True если существует невырожденный треугольник со сторонами side1, side2, side3 и False в противном случае.
Примечание 1. С данной задачей мы уже сталкивались при изучении условного оператора.
Примечание 2. Следующий программный код:



		РЕШЕНИЕ:
def is_valid_triangle(x, y, z):
   if x < y +z and y < x + z and  z < x + y:
      print(True)
   else:
      print(False)
symbol, sumbol_2, symbol_3 = int(input()), int(input()), int(input())
is_valid_triangle(symbol, sumbol_2, symbol_3)
    


		ЗАДАНИЕ:
Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и возвращает значение 
True если число является простым и False в противном случае.

Примечание. Следующий программный код:


		РЕШЕНИЕ:
def is_prime(x):
   total = 0
   for i in range(1, x + 1):
      if x % i == 0:
         total += 1      
   print(True if total == 2 else False)
symbol = int(input())
is_prime(symbol)








		ЗАДАНИЕ:






		РЕШЕНИЕ:








		ЗАДАНИЕ:




		РЕШЕНИЕ:




		ЗАДАНИЕ:





		РЕШЕНИЕ:


		ЗАДАНИЕ:


		РЕШЕНИЕ:




		ЗАДАНИЕ:


		РЕШЕНИЕ:



		ЗАДАНИЕ:


		РЕШЕНИЕ:
